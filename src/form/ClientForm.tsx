import React from 'react'
import { FieldType, One } from 'react-declarative'
import Button from '@mui/material/Button'
import pb from '../lib/pocketbase'
import { Container } from '@mui/material'
const ClientForm = () => {
	interface IClientFormProps {
		FIO: string
		gender: '–º—É–∂—Å–∫–æ–π' | '–∂–µ–Ω—Å–∫–∏–π' | ''
		seria: string
		placeBorn: string
		dataBorn: string
		FINFL: number
		passportIssued: string
		dateOfIssued: string
		expirationDate: string
		nationality: string
		email: string
		phone: number
		departament: string
		job: string
		image: File
	}
	const fields = [
		{
			type: FieldType.Typography,
			typovarient: 'h4',
			placeholder: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
		},
		{
			type: FieldType.Paper,
			children: 'photo',
			desktopColumns: 3,
			fields: [
				{
					type: FieldType.Component, //–∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
					name: 'image',
					required: true,
					element: (props: { onChange: (val: File) => void }) => (
						<input
							type='file'
							accept='image/*'
							style={{
								width: '200px',
								height: '250px',
								backgroundColor: 'red',
							}}
							onChange={e => {
								const file = e.target.files?.[0]
								if (file) {
									props.onChange({ file } as unknown as File)
									const reader = new FileReader()
									reader.onload = function () {
										const base64 = reader.result?.toString().split(',')[1]
										console.log(base64)
									}
									reader.readAsDataURL(file)
								}
							}}
						/>
					),
				},
			],
		},
		{
			type: FieldType.Paper,
			desktopColumns: 9,
			children: '–§–ò–û',
			fields: [
				{
					type: FieldType.Text,

					desktopColumns: 12,
					name: 'FIO',
					label: 'F I O',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è',
					required: true,
				},
				{
					type: FieldType.Combo,
					desktopColumns: 4,
					itemList: ['–∂–µ–Ω—Å–∫–∏–π', '–º—É–∂—Å–∫–æ–π'],
					name: 'gender',
					placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª',
					label: '–ü–æ–ª',
					required: true,
				},
				{
					type: FieldType.Text,
					desktopColumns: 8,
					outline: 'none',
					name: 'seria',
					label: '–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'placeBorn',
					desktopColumns: 4,
					label: '–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'dataBorn',
					desktopColumns: 8,
					label: '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'FINFL',
					label: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –Ω–æ–º–µ—Ä',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –Ω–æ–º–µ—Ä',
					required: true,
				},
			],
		},

		{
			type: FieldType.Paper,
			children: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
			fields: [
				{
					type: FieldType.Text,
					name: 'passportIssued',
					label: '–ü–∞—Å–ø–æ—Ä—Ç –≤—ã–¥–∞–Ω',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'dateOfIssued',
					label: '–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'expirationDate',
					label: '–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'nationality',
					label: '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'email',
					label: 'Email',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ email',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'phone',
					label: '–¢–µ–ª–µ—Ñ–æ–Ω',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'departament',
					label: '–û—Ç–¥–µ–ª',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª',
					required: true,
				},
				{
					type: FieldType.Text,
					name: 'job',
					label: '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
					placeholder: '–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å',
					required: true,
				},
			],
		},
	]

	const [form, setForm] = React.useState<IClientFormProps>({
		FIO: '',
		gender: '',
		seria: '',
		placeBorn: '',
		dataBorn: '',
		FINFL: 0,
		passportIssued: '',
		dateOfIssued: '',
		expirationDate: '',
		nationality: '',
		email: '',
		phone: 0,
		departament: '',
		job: '',
		image: new File([], ''),
	})
	async function handleSubmit(data: IClientFormProps) {
		const formData = new FormData()
		formData.append('FIO', data.FIO)
		formData.append('gender', data.gender)
		formData.append('seria', data.seria)
		formData.append('placeBorn', data.placeBorn)
		formData.append('dataBorn', data.dataBorn)
		formData.append('FINFL', data.FINFL.toString())
		formData.append('passportIssued', data.passportIssued)
		formData.append('dateOfIssued', data.dateOfIssued)
		formData.append('expirationDate', data.expirationDate)
		formData.append('nationality', data.nationality)
		formData.append('email', data.email)
		formData.append('phone', data.phone.toString())
		formData.append('departament', data.departament)
		formData.append('job', data.job)

		if (data.image && data.image.name) {
			formData.append('image', data.image)
			console.log('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω:', data.image)
		} else {
			console.warn('‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
		}

		for (const [key, val] of formData.entries()) {
			console.log(`üßæ ${key}:`, val)
		}

		// –æ—Ç–ø—Ä–∞–≤–∫–∞
		try {
			const result = await pb.collection('employees').create(formData)
			console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result)
		} catch (err) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err)
		}
	}

	return (
		<Container>
			<One
				onChange={(data: IClientFormProps, initial) => {
					if (initial) {
						return
					}
					setForm(data)
				}}
				fields={fields}
			/>
			<Button onClick={() => handleSubmit(form)}>click</Button>
		</Container>
	)
}

export default ClientForm
